/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
var RadialProgressComponent = /** @class */ (function () {
    function RadialProgressComponent() {
        this.mode = 'determinate';
        this.value = 0;
        this.diameter = 60;
        this.strokeWidth = 3;
    }
    Object.defineProperty(RadialProgressComponent.prototype, "circleRadius", {
        /** The radius of the spinner, adjusted for stroke width. */
        get: /**
         * The radius of the spinner, adjusted for stroke width.
         * @return {?}
         */
        function () {
            return (this.diameter - this.strokeWidth) / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialProgressComponent.prototype, "viewBox", {
        /** The view box of the spinner's svg element. */
        get: /**
         * The view box of the spinner's svg element.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var viewBox = this.circleRadius * 2 + this.strokeWidth;
            return "0 0 " + viewBox + " " + viewBox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialProgressComponent.prototype, "strokeCircumference", {
        /** The stroke circumference of the svg circle. */
        get: /**
         * The stroke circumference of the svg circle.
         * @return {?}
         */
        function () {
            return 2 * Math.PI * this.circleRadius;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialProgressComponent.prototype, "strokeDashOffset", {
        /** The dash offset of the svg circle. */
        get: /**
         * The dash offset of the svg circle.
         * @return {?}
         */
        function () {
            if (this.mode === 'determinate') {
                return this.strokeCircumference * (100 - this.value) / 100;
            }
            // In fallback mode set the circle to 60% and rotate it with CSS.
            if (this.mode === 'indeterminate') {
                return this.strokeCircumference * 0.4;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialProgressComponent.prototype, "circleStrokeWidth", {
        /** Stroke width of the circle in percent. */
        get: /**
         * Stroke width of the circle in percent.
         * @return {?}
         */
        function () {
            return this.strokeWidth / this.diameter * 100;
        },
        enumerable: true,
        configurable: true
    });
    RadialProgressComponent.decorators = [
        { type: Component, args: [{
                    selector: 'radial-progress',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.mode]': 'mode',
                        '[style.width.px]': 'diameter',
                        '[style.height.px]': 'diameter'
                    },
                    template: "\n    <svg class=\"radial-progress\"\n         [style.width.px]=\"diameter\"\n         [style.height.px]=\"diameter\"\n         [attr.viewBox]=\"viewBox\"\n         preserveAspectRatio=\"xMidYMid meet\"\n         focusable=\"false\">\n\n      <circle class=\"radial-progress-meter\"\n              cx=\"50%\"\n              cy=\"50%\"\n              [attr.r]=\"circleRadius\"\n              [style.stroke-width.%]=\"circleStrokeWidth\"/>\n\n      <circle class=\"radial-progress-value\"\n              cx=\"50%\"\n              cy=\"50%\"\n              [attr.r]=\"circleRadius\"\n              [style.stroke-dashoffset.px]=\"strokeDashOffset\"\n              [style.stroke-dasharray.px]=\"strokeCircumference\"\n              [style.stroke-width.%]=\"circleStrokeWidth\"/>\n    </svg>\n  "
                }] }
    ];
    RadialProgressComponent.propDecorators = {
        mode: [{ type: Input }],
        value: [{ type: Input }],
        diameter: [{ type: Input }],
        strokeWidth: [{ type: Input }]
    };
    return RadialProgressComponent;
}());
export { RadialProgressComponent };
if (false) {
    /** @type {?} */
    RadialProgressComponent.prototype.mode;
    /** @type {?} */
    RadialProgressComponent.prototype.value;
    /** @type {?} */
    RadialProgressComponent.prototype.diameter;
    /** @type {?} */
    RadialProgressComponent.prototype.strokeWidth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaWFsLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGVtcGxhdGVzL3JhZGlhbC1wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFFO0lBQUE7UUFrQ1csU0FBSSxHQUFvQyxhQUFhLENBQUM7UUFDdEQsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxnQkFBVyxHQUFHLENBQUMsQ0FBQztJQXFDM0IsQ0FBQztJQWxDQyxzQkFBSSxpREFBWTtRQURoQiw0REFBNEQ7Ozs7O1FBQzVEO1lBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLDRDQUFPO1FBRFgsaURBQWlEOzs7OztRQUNqRDs7Z0JBQ1EsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXO1lBQ3hELE9BQU8sU0FBTyxPQUFPLFNBQUksT0FBUyxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksd0RBQW1CO1FBRHZCLGtEQUFrRDs7Ozs7UUFDbEQ7WUFDRSxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxxREFBZ0I7UUFEcEIseUNBQXlDOzs7OztRQUN6QztZQUNFLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxhQUFhLEVBQUU7Z0JBQy9CLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDNUQ7WUFFRCxpRUFBaUU7WUFDakUsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtnQkFDakMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDO2FBQ3ZDO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLHNEQUFpQjtRQURyQiw2Q0FBNkM7Ozs7O1FBQzdDO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2hELENBQUM7OztPQUFBOztnQkF4RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUU7d0JBQ0osYUFBYSxFQUFFLE1BQU07d0JBQ3JCLGtCQUFrQixFQUFFLFVBQVU7d0JBQzlCLG1CQUFtQixFQUFFLFVBQVU7cUJBQ2hDO29CQUNELFFBQVEsRUFBRSx1eEJBc0JUO2lCQUNGOzs7dUJBR0UsS0FBSzt3QkFDTCxLQUFLOzJCQUNMLEtBQUs7OEJBQ0wsS0FBSzs7SUFxQ1IsOEJBQUM7Q0FBQSxBQTFFRCxJQTBFQztTQTFDWSx1QkFBdUI7OztJQUVsQyx1Q0FBK0Q7O0lBQy9ELHdDQUFtQjs7SUFDbkIsMkNBQXVCOztJQUN2Qiw4Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYWRpYWwtcHJvZ3Jlc3MnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGhvc3Q6IHtcclxuICAgICdbYXR0ci5tb2RlXSc6ICdtb2RlJyxcclxuICAgICdbc3R5bGUud2lkdGgucHhdJzogJ2RpYW1ldGVyJyxcclxuICAgICdbc3R5bGUuaGVpZ2h0LnB4XSc6ICdkaWFtZXRlcidcclxuICB9LFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8c3ZnIGNsYXNzPVwicmFkaWFsLXByb2dyZXNzXCJcclxuICAgICAgICAgW3N0eWxlLndpZHRoLnB4XT1cImRpYW1ldGVyXCJcclxuICAgICAgICAgW3N0eWxlLmhlaWdodC5weF09XCJkaWFtZXRlclwiXHJcbiAgICAgICAgIFthdHRyLnZpZXdCb3hdPVwidmlld0JveFwiXHJcbiAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCJcclxuICAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIj5cclxuXHJcbiAgICAgIDxjaXJjbGUgY2xhc3M9XCJyYWRpYWwtcHJvZ3Jlc3MtbWV0ZXJcIlxyXG4gICAgICAgICAgICAgIGN4PVwiNTAlXCJcclxuICAgICAgICAgICAgICBjeT1cIjUwJVwiXHJcbiAgICAgICAgICAgICAgW2F0dHIucl09XCJjaXJjbGVSYWRpdXNcIlxyXG4gICAgICAgICAgICAgIFtzdHlsZS5zdHJva2Utd2lkdGguJV09XCJjaXJjbGVTdHJva2VXaWR0aFwiLz5cclxuXHJcbiAgICAgIDxjaXJjbGUgY2xhc3M9XCJyYWRpYWwtcHJvZ3Jlc3MtdmFsdWVcIlxyXG4gICAgICAgICAgICAgIGN4PVwiNTAlXCJcclxuICAgICAgICAgICAgICBjeT1cIjUwJVwiXHJcbiAgICAgICAgICAgICAgW2F0dHIucl09XCJjaXJjbGVSYWRpdXNcIlxyXG4gICAgICAgICAgICAgIFtzdHlsZS5zdHJva2UtZGFzaG9mZnNldC5weF09XCJzdHJva2VEYXNoT2Zmc2V0XCJcclxuICAgICAgICAgICAgICBbc3R5bGUuc3Ryb2tlLWRhc2hhcnJheS5weF09XCJzdHJva2VDaXJjdW1mZXJlbmNlXCJcclxuICAgICAgICAgICAgICBbc3R5bGUuc3Ryb2tlLXdpZHRoLiVdPVwiY2lyY2xlU3Ryb2tlV2lkdGhcIi8+XHJcbiAgICA8L3N2Zz5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSYWRpYWxQcm9ncmVzc0NvbXBvbmVudCB7XHJcblxyXG4gIEBJbnB1dCgpIG1vZGU6ICdkZXRlcm1pbmF0ZScgfCAnaW5kZXRlcm1pbmF0ZScgPSAnZGV0ZXJtaW5hdGUnO1xyXG4gIEBJbnB1dCgpIHZhbHVlID0gMDtcclxuICBASW5wdXQoKSBkaWFtZXRlciA9IDYwO1xyXG4gIEBJbnB1dCgpIHN0cm9rZVdpZHRoID0gMztcclxuXHJcbiAgLyoqIFRoZSByYWRpdXMgb2YgdGhlIHNwaW5uZXIsIGFkanVzdGVkIGZvciBzdHJva2Ugd2lkdGguICovXHJcbiAgZ2V0IGNpcmNsZVJhZGl1cygpIHtcclxuICAgIHJldHVybiAodGhpcy5kaWFtZXRlciAtIHRoaXMuc3Ryb2tlV2lkdGgpIC8gMjtcclxuICB9XHJcblxyXG4gIC8qKiBUaGUgdmlldyBib3ggb2YgdGhlIHNwaW5uZXIncyBzdmcgZWxlbWVudC4gKi9cclxuICBnZXQgdmlld0JveCgpIHtcclxuICAgIGNvbnN0IHZpZXdCb3ggPSB0aGlzLmNpcmNsZVJhZGl1cyAqIDIgKyB0aGlzLnN0cm9rZVdpZHRoO1xyXG4gICAgcmV0dXJuIGAwIDAgJHt2aWV3Qm94fSAke3ZpZXdCb3h9YDtcclxuICB9XHJcblxyXG4gIC8qKiBUaGUgc3Ryb2tlIGNpcmN1bWZlcmVuY2Ugb2YgdGhlIHN2ZyBjaXJjbGUuICovXHJcbiAgZ2V0IHN0cm9rZUNpcmN1bWZlcmVuY2UoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAyICogTWF0aC5QSSAqIHRoaXMuY2lyY2xlUmFkaXVzO1xyXG4gIH1cclxuXHJcbiAgLyoqIFRoZSBkYXNoIG9mZnNldCBvZiB0aGUgc3ZnIGNpcmNsZS4gKi9cclxuICBnZXQgc3Ryb2tlRGFzaE9mZnNldCgpIHtcclxuICAgIGlmICh0aGlzLm1vZGUgPT09ICdkZXRlcm1pbmF0ZScpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3Ryb2tlQ2lyY3VtZmVyZW5jZSAqICgxMDAgLSB0aGlzLnZhbHVlKSAvIDEwMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbiBmYWxsYmFjayBtb2RlIHNldCB0aGUgY2lyY2xlIHRvIDYwJSBhbmQgcm90YXRlIGl0IHdpdGggQ1NTLlxyXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gJ2luZGV0ZXJtaW5hdGUnKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnN0cm9rZUNpcmN1bWZlcmVuY2UgKiAwLjQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKiogU3Ryb2tlIHdpZHRoIG9mIHRoZSBjaXJjbGUgaW4gcGVyY2VudC4gKi9cclxuICBnZXQgY2lyY2xlU3Ryb2tlV2lkdGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdHJva2VXaWR0aCAvIHRoaXMuZGlhbWV0ZXIgKiAxMDA7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=