{"version":3,"sources":["ng://@ngx-gallery/gallerize/lib/gallerize.directive.ts","ng://@ngx-gallery/gallerize/lib/gallerize.module.ts"],"names":["GallerizeDirective","_zone","_el","_gallery","_lightbox","_renderer","platform","_document","_galleryCmp","this","_galleryId","selector","isPlatformBrowser","_mode","prototype","ngOnInit","_this","runOutsideAngular","gallerize","ref","detectorMode","galleryMode","ngOnDestroy","_detector$","complete","_observer$","disconnect","_itemClick$","unsubscribe","_itemChange$","galleryRef","itemClick","subscribe","i","open","itemsChanged","state","load","items","Subject","pipe","debounceTime","switchMap","imageElements","nativeElement","querySelectorAll","length","images_1","from","map","el","setStyle","setProperty","run","HTMLImageElement","src","getAttribute","thumb","background","currentStyle","defaultView","getComputedStyle","backgroundImage","slice","replace","tap","data","push","ImageItem","finalize","EMPTY","MutationObserver","next","observe","childList","subtree","Directive","args","NgZone","ElementRef","Gallery","Lightbox","Renderer2","Object","decorators","type","Inject","PLATFORM_ID","DOCUMENT","GalleryComponent","Host","Self","Optional","Input","GallerizeModule","NgModule","imports","GalleryModule","LightboxModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Inject,\r\n  Optional,\r\n  Self,\r\n  Host,\r\n  NgZone,\r\n  ElementRef,\r\n  Renderer2,\r\n  PLATFORM_ID\r\n} from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\n\r\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '@ngx-gallery/core';\r\nimport { Lightbox } from '@ngx-gallery/lightbox';\r\n\r\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * This directive has 2 modes:\r\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\r\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\r\n */\r\n\r\nconst enum GallerizeMode {\r\n  Detector = 'detector',\r\n  Gallery = 'gallery'\r\n}\r\n\r\n@Directive({\r\n  selector: '[gallerize]'\r\n})\r\nexport class GallerizeDirective implements OnInit, OnDestroy {\r\n\r\n  /** Default gallery id */\r\n  private _galleryId = 'lightbox';\r\n\r\n  /** Gallerize mode */\r\n  private readonly _mode: GallerizeMode;\r\n\r\n  /** If host element is a HTMLElement, will use the following variables: */\r\n\r\n  /** Stream that emits to fire the detection stream the image elements has changed */\r\n  private _observer$: any;\r\n\r\n  /** Stream that emits when image is discover */\r\n  private _detector$: Subject<any>;\r\n\r\n  /** If host element is a GalleryComponent, will use the following variables: */\r\n\r\n  /** Gallery events (if used on a gallery component) */\r\n  private _itemClick$: Subscription;\r\n  private _itemChange$: Subscription;\r\n\r\n  // ======================================================\r\n\r\n  /** If set, it will become the gallery id */\r\n  @Input() gallerize: string;\r\n\r\n  /** The selector used to query images elements */\r\n  @Input() selector = 'img';\r\n\r\n  constructor(private _zone: NgZone,\r\n              private _el: ElementRef,\r\n              private _gallery: Gallery,\r\n              private _lightbox: Lightbox,\r\n              private _renderer: Renderer2,\r\n              @Inject(PLATFORM_ID) platform: Object,\r\n              @Inject(DOCUMENT) private _document: any,\r\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\r\n\r\n    // Set gallerize mode\r\n    if (isPlatformBrowser(platform)) {\r\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._zone.runOutsideAngular(() => {\r\n      this._galleryId = this.gallerize || this._galleryId;\r\n      const ref = this._gallery.ref(this._galleryId);\r\n\r\n      switch (this._mode) {\r\n        case GallerizeMode.Detector:\r\n          this.detectorMode(ref);\r\n          break;\r\n        case GallerizeMode.Gallery:\r\n          this.galleryMode(ref);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    switch (this._mode) {\r\n      case GallerizeMode.Detector:\r\n        this._detector$.complete();\r\n        this._observer$.disconnect();\r\n        break;\r\n      case GallerizeMode.Gallery:\r\n        this._itemClick$.unsubscribe();\r\n        this._itemChange$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\r\n   * Adds a click event to each gallery item so it opens in lightbox */\r\n  private galleryMode(galleryRef: GalleryRef) {\r\n    // Clone its items to the new gallery instance\r\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\r\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\r\n  }\r\n\r\n  /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\r\n   *  Detects images and adds a click event to each image so it opens in the lightbox */\r\n  private detectorMode(galleryRef: GalleryRef) {\r\n    this._detector$ = new Subject();\r\n    // Query image elements\r\n    this._detector$.pipe(\r\n      debounceTime(300),\r\n      switchMap(() => {\r\n\r\n        /** get all img elements from content */\r\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\r\n\r\n        if (imageElements && imageElements.length) {\r\n\r\n          const images: GalleryItem[] = [];\r\n\r\n          return from(imageElements).pipe(\r\n            map((el: any, i) => {\r\n              // Add click event to the image\r\n              this._renderer.setStyle(el, 'cursor', 'pointer');\r\n              this._renderer.setProperty(el, 'onclick', () =>\r\n                this._zone.run(() => this._lightbox.open(i, this._galleryId))\r\n              );\r\n\r\n              if (el instanceof HTMLImageElement) {\r\n                // If element is type of img use the src property\r\n                return {\r\n                  src: el.getAttribute('imageSrc') || el.src,\r\n                  thumb: el.getAttribute('thumbSrc') || el.src\r\n                };\r\n              } else {\r\n                // Otherwise, use element background-image url\r\n                const elStyle = el.currentStyle || this._document.defaultView.getComputedStyle(el, null);\r\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\r\n                return {\r\n                  src: el.getAttribute('imageSrc') || background,\r\n                  thumb: el.getAttribute('thumbSrc') || background\r\n                };\r\n              }\r\n            }),\r\n            tap((data: any) => images.push(new ImageItem(data))),\r\n            finalize(() => galleryRef.load(images))\r\n          );\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    ).subscribe();\r\n\r\n    // Observe content changes\r\n    this._observer$ = new MutationObserver(() => this._detector$.next());\r\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { LightboxModule } from '@ngx-gallery/lightbox';\r\nimport { GallerizeDirective } from './gallerize.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    GalleryModule,\r\n    LightboxModule\r\n  ],\r\n  declarations: [GallerizeDirective],\r\n  exports: [GallerizeDirective]\r\n})\r\nexport class GallerizeModule {\r\n\r\n}\r\n"]}